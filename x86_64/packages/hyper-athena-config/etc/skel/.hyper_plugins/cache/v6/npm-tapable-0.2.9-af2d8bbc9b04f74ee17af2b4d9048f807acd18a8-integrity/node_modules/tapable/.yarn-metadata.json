{
  "manifest": {
    "name": "tapable",
    "version": "0.2.9",
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "description": "Just a little module for plugins.",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "http://github.com/webpack/tapable.git"
    },
    "devDependencies": {
      "mocha": "^2.2.4",
      "should": "^5.2.0"
    },
    "engines": {
      "node": ">=0.6"
    },
    "files": [
      "lib"
    ],
    "homepage": "https://github.com/webpack/tapable",
    "main": "lib/Tapable.js",
    "scripts": {
      "test": "mocha --reporter spec"
    },
    "_registry": "npm",
    "_loc": "/home/athena/.hyper_plugins/cache/v6/npm-tapable-0.2.9-af2d8bbc9b04f74ee17af2b4d9048f807acd18a8-integrity/node_modules/tapable/package.json",
    "readmeFilename": "README.md",
    "readme": "# Tapable\n\n``` javascript\nvar Tapable = require(\"tapable\");\n```\n\n`Tapable` is a class for plugin binding and applying.\n\nJust extend it.\n\n``` javascript\nfunction MyClass() {\n\tTapable.call(this);\n}\n\nMyClass.prototype = Object.create(Tapable.prototype);\n\nMyClass.prototype.method = function() {};\n```\n\nOr mix it in.\n\n``` javascript\nfunction MyClass2() {\n\tEventEmitter.call(this);\n\tTapable.call(this);\n}\n\nMyClass2.prototype = Object.create(EventEmitter.prototype);\nTapable.mixin(MyClass2.prototype);\n\nMyClass2.prototype.method = function() {};\n```\n\n## Public functions\n\n### apply\n\n``` javascript\nvoid apply(plugins: Plugin...)\n```\n\nAttaches all plugins passed as arguments to the instance, by calling `apply` on them.\n\n### plugin\n\n``` javascript\nvoid plugin(names: string|string[], handler: Function)\n```\n\n`names` are the names (or a single name) of the plugin interfaces the class provides.\n\n`handler` is a callback function. The signature depends on the class. `this` is the instance of the class.\n\n## Protected functions\n\n### applyPlugins\n\n``` javascript\nvoid applyPlugins(name: string, args: any...)\n```\n\nSynchronously applies all registered handlers for `name`. The handler functions are called with all args.\n\n### applyPluginsWaterfall\n\n``` javascript\nany applyPluginsWaterfall(name: string, init: any, args: any...)\n```\n\nSynchronously applies all registered handlers for `name`. The handler functions are called with the return value of the previous handler and all args. For the first handler `init` is used and the return value of the last handler is return by `applyPluginsWaterfall`\n\n### applyPluginsAsync\n\n``` javascript\nvoid applyPluginsAsync(\n\tname: string,\n\targs: any...,\n\tcallback: (err?: Error) -> void\n)\n```\n\nAsynchronously applies all registered handlers for `name`. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. The handler functions are called in order of registration.\n\n`callback` is called after all handlers are called.\n\n### applyPluginsBailResult\n\n``` javascript\nany applyPluginsBailResult(name: string, args: any...)\n```\n\nSynchronously applies all registered handlers for `name`. The handler function are called with all args. If a handler function returns something `!== undefined`, the value is returned and no more handlers are applied.\n\n### applyPluginsAsyncWaterfall\n\n``` javascript\napplyPluginsAsyncWaterfall(\n\tname: string,\n\tinit: any,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nAsynchronously applies all registered handlers for `name`. The handler functions are called with the current value and a callback function with the signature `(err: Error, nextValue: any) -> void`. When called, `nextValue` is the current value for the next handler. The current value for the first handler is `init`. After all handlers are applied, `callback` is called with the last value. If any handler passes a value for `err`, the `callback` is called with this error and no more handlers are called.\n\n### applyPluginsAsyncSeries\n\n``` javascript\napplyPluginsAsyncSeries(\n\tname: string,\n\targs: any...,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nAsynchronously applies all registered handlers for `name`. The handler functions are called with all `args` and a callback function with the signature `(err: Error) -> void`. The handlers are called in series, one at a time. After all handlers are applied, `callback` is called. If any handler passes a value for `err`, the `callback` is called with this error and no more handlers are called.\n\n### applyPluginsParallel\n\n``` javascript\napplyPluginsParallel(\n\tname: string,\n\targs: any...,\n\tcallback: (err?: Error) -> void\n)\n```\n\nApplies all registered handlers for `name` in parallel. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. The `callback` function is called when all handlers have called the callback without `err`. If any handler calls the callback with `err`, `callback` is invoked with this error and the other handlers are ignored.\n\n### applyPluginsParallelBailResult\n\n``` javascript\napplyPluginsParallelBailResult(\n\tname: string,\n\targs: any...,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nApplies all registered handlers for `name` in parallel. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. Handler functions must call the callback. They can either pass an error, pass undefined, or pass a value. The first result (either error or value) which is not undefined is passed to the `callback`. The order is defined by registration, not by the speed of the handler function.\n\n### hasPlugins\n\n``` js\nhasPlugins(\n\tname: string\n)\n```\n\nReturns true, if plugins are registered for this name.\n",
    "licenseText": "The MIT License\n\nCopyright (c) Tobias Koppers @sokra\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tapable/-/tapable-0.2.9.tgz#af2d8bbc9b04f74ee17af2b4d9048f807acd18a8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tapable/-/tapable-0.2.9.tgz",
    "hash": "af2d8bbc9b04f74ee17af2b4d9048f807acd18a8",
    "integrity": "sha512-2wsvQ+4GwBvLPLWsNfLCDYGsW6xb7aeC6utq2Qh0PFwgEy7K7dsma9Jsmb2zSQj7GvYAyUGSntLtsv++GmgL1A==",
    "registry": "npm",
    "packageName": "tapable",
    "cacheIntegrity": "sha512-2wsvQ+4GwBvLPLWsNfLCDYGsW6xb7aeC6utq2Qh0PFwgEy7K7dsma9Jsmb2zSQj7GvYAyUGSntLtsv++GmgL1A== sha1-ry2LvJsE907hevK02QSPgHrNGKg="
  },
  "registry": "npm",
  "hash": "af2d8bbc9b04f74ee17af2b4d9048f807acd18a8"
}