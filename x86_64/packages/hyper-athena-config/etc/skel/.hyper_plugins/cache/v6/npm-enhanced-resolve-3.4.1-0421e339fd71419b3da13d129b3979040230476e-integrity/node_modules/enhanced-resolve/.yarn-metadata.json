{
  "manifest": {
    "name": "enhanced-resolve",
    "version": "3.4.1",
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "description": "Offers a async require.resolve function. It's highly configurable.",
    "files": [
      "lib"
    ],
    "dependencies": {
      "graceful-fs": "^4.1.2",
      "memory-fs": "^0.4.0",
      "object-assign": "^4.0.1",
      "tapable": "^0.2.7"
    },
    "licenses": [
      {
        "type": "MIT",
        "url": "http://www.opensource.org/licenses/mit-license.php"
      }
    ],
    "devDependencies": {
      "beautify-lint": "^1.0.3",
      "codecov.io": "^0.1.6",
      "coveralls": "^2.11.6",
      "eslint": "^3.14.1",
      "eslint-plugin-node": "^3.0.5",
      "eslint-plugin-nodeca": "^1.0.3",
      "istanbul": "^0.4.1",
      "js-beautify": "^1.5.10",
      "mocha": "^2.3.4",
      "should": "^8.0.2"
    },
    "engines": {
      "node": ">=4.3.0 <5.0.0 || >=5.10"
    },
    "main": "lib/node.js",
    "homepage": "http://github.com/webpack/enhanced-resolve",
    "scripts": {
      "beautify-lint": "beautify-lint lib/**.js test/*.js",
      "beautify": "beautify-rewrite lib/**.js test/*.js",
      "lint": "eslint lib test",
      "pretest": "npm run lint && npm run beautify-lint",
      "test": "mocha --full-trace --check-leaks",
      "precover": "npm run lint && npm run beautify-lint",
      "cover": "istanbul cover node_modules/mocha/bin/_mocha",
      "travis": "npm run cover -- --report lcovonly"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/webpack/enhanced-resolve.git"
    },
    "_registry": "npm",
    "_loc": "/home/athena/.hyper_plugins/cache/v6/npm-enhanced-resolve-3.4.1-0421e339fd71419b3da13d129b3979040230476e-integrity/node_modules/enhanced-resolve/package.json",
    "readmeFilename": "README.md",
    "readme": "# enhanced-resolve\n\nOffers an async require.resolve function. It's highly configurable.\n\n## Features\n\n* plugin system\n* provide a custom filesystem\n* sync and async node.js filesystems included\n\n\n## Getting Started\n### Install\n```sh\n# npm\nnpm install enhanced-resolve\n# or Yarn\nyarn add enhanced-resolve\n```\n\n### Creating a Resolver\nThe easiest way to create a resolver is to use the `createResolver` function on `ResolveFactory`, along with one of the supplied File System implementations.\n```js\nconst {\n  NodeJsInputFileSystem,\n  CachedInputFileSystem,\n  ResolverFactory\n} = require('enhanced-resolve');\n\n// create a resolver\nconst myResolver = ResolverFactory.createResolver({\n  // Typical usage will consume the `NodeJsInputFileSystem` + `CachedInputFileSystem`, which wraps the Node.js `fs` wrapper to add resilience + caching.\n  fileSystem: new CachedInputFileSystem(new NodeJsInputFileSystem(), 4000),\n  extensions: ['.js', '.json']\n  /* any other resolver options here. Options/defaults can be seen below */\n});\n\n// resolve a file with the new resolver\nconst context = {};\nconst lookupStartPath = '/Users/webpack/some/root/dir';\nconst request = './path/to-look-up.js';\nmyResolver.resolve({}, lookupStartPath, request, (err/*Error*/, filepath/*string*/) => {\n  // Do something with the path\n});\n```\n\nFor more examples creating different types resolvers (sync/async, context, etc) see `lib/node.js`.\n#### Resolver Options\n| Field                    | Default                     | Description                                                                        |\n| ------------------------ | --------------------------- | ---------------------------------------------------------------------------------- |\n| modules                  | [\"node_modules\"]            | A list of directories to resolve modules from, can be absolute path or folder name |\n| descriptionFiles         | [\"package.json\"]            | A list of description files to read from |\n| plugins                  | []                          | A list of additional resolve plugins which should be applied |\n| mainFields               | [\"main\"]                    | A list of main fields in description files |\n| aliasFields              | []                          | A list of alias fields in description files |\n| mainFiles                | [\"index\"]                   | A list of main files in directories |\n| extensions               | [\".js\", \".json\", \".node\"]   | A list of extensions which should be tried for files |\n| enforceExtension         | false                       | Enforce that a extension from extensions must be used |\n| moduleExtensions         | []                          | A list of module extensions which should be tried for modules |\n| enforceModuleExtension   | false                       | Enforce that a extension from moduleExtensions must be used |\n| alias                    | []                          | A list of module alias configurations or an object which maps key to value |\n| resolveToContext         | false                       | Resolve to a context instead of a file |\n| unsafeCache              | false                       | Use this cache object to unsafely cache the successful requests |\n| cacheWithContext         | true                        | If unsafe cache is enabled, includes `request.context` in the cache key  |\n| cachePredicate           | function() { return true }; | A function which decides whether a request should be cached or not. An object is passed to the function with `path` and `request` properties. |\n| fileSystem               |                             | The file system which should be used |\n| resolver                 | undefined                   | A prepared Resolver to which the plugins are attached |\n\n## Plugins\nSimilar to `webpack`, the core of `enhanced-resolve` functionality is implemented as individual plugins that are executed using [`Tapable`](https://github.com/webpack/tapable). These plugins can extend the functionality of the library, adding other ways for files/contexts to be resolved.\n\nA plugin should be a `class` (or its ES5 equivalent) with an `apply` method. The `apply` method will receive a `resolver` instance, that can be used to hook in to the event system.\n\n### Plugin Boilerplate\n```js\nclass MyResolverPlugin {\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n\n  apply(resolver) {\n    resolver.plugin(this.source, (request, callback) => {\n      // Any logic you need to create a new `request` can go here\n      resolver.doResolve(this.target, request, null, callback);\n    });\n  }\n}\n```\n\nPlugins are executed in a pipeline, and register which event they should be executed before/after. In the example above, `source` is the name of the event that starts the pipeline, and `target` is what event this plugin should fire, which is what continues the execution of the pipeline. For an example of how these different plugin events create a chain, see `lib/ResolverFactory.js`, in the `//// pipeline ////` section.\n\n## Tests\n\n``` javascript\nnpm test\n```\n\n[![Build Status](https://secure.travis-ci.org/webpack/enhanced-resolve.png?branch=master)](http://travis-ci.org/webpack/enhanced-resolve)\n\n\n## Passing options from webpack\nIf you are using `webpack`, and you want to pass custom options to `enhanced-resolve`, the options are passed from the `resolve` key of your webpack configuration e.g.:\n\n```\nresolve: {\n  extensions: ['', '.js', '.jsx'],\n  modules: ['src', 'node_modules'],\n  plugins: [new DirectoryNamedWebpackPlugin()]\n  ...\n},\n```\n\n## License\n\nCopyright (c) 2012-2016 Tobias Koppers\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
    "license": "MIT"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/enhanced-resolve/-/enhanced-resolve-3.4.1.tgz#0421e339fd71419b3da13d129b3979040230476e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/enhanced-resolve/-/enhanced-resolve-3.4.1.tgz",
    "hash": "0421e339fd71419b3da13d129b3979040230476e",
    "integrity": "sha512-ZaAux1rigq1e2nQrztHn4h2ugvpzZxs64qneNah+8Mh/K0CRqJFJc+UoXnUsq+1yX+DmQFPPdVqboKAJ89e0Iw==",
    "registry": "npm",
    "packageName": "enhanced-resolve",
    "cacheIntegrity": "sha512-ZaAux1rigq1e2nQrztHn4h2ugvpzZxs64qneNah+8Mh/K0CRqJFJc+UoXnUsq+1yX+DmQFPPdVqboKAJ89e0Iw== sha1-BCHjOf1xQZs9oT0Smzl5BAIwR24="
  },
  "registry": "npm",
  "hash": "0421e339fd71419b3da13d129b3979040230476e"
}