{
  "manifest": {
    "title": "UAParser.js",
    "name": "ua-parser-js",
    "version": "0.7.31",
    "author": {
      "name": "Faisal Salman",
      "email": "f@faisalman.com",
      "url": "http://faisalman.com"
    },
    "description": "Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data. Supports browser & node.js environment",
    "keywords": [
      "user-agent",
      "parser",
      "browser",
      "engine",
      "os",
      "device",
      "cpu",
      "jquery-plugin",
      "ecosystem:jquery"
    ],
    "homepage": "https://github.com/faisalman/ua-parser-js",
    "contributors": [
      {
        "name": "Aamir Poonawalla",
        "email": "aamir@urx.com"
      },
      {
        "name": "Admas",
        "email": "mollases@users.noreply.github.com"
      },
      {
        "name": "algenon",
        "email": "m@antonz.ru"
      },
      {
        "name": "Alvin Portillo",
        "email": "alvin@8thwall.com"
      },
      {
        "name": "Amumu",
        "email": "yoyo837@hotmail.com"
      },
      {
        "name": "Andrea Vaghi",
        "email": "andrea.vaghi@jobrapido.com"
      },
      {
        "name": "Anton Zhiyanov",
        "email": "m@antonz.ru"
      },
      {
        "name": "Arturo Mejia",
        "email": "amejia@blim.com"
      },
      {
        "name": "Arun Rama Reddy",
        "email": "arunramareddy@gmail.com"
      },
      {
        "name": "Austin Pray",
        "email": "austin@austinpray.com"
      },
      {
        "name": "Bendeguz",
        "email": "symunona@gmail.com"
      },
      {
        "name": "Benjamin Bertrand",
        "email": "bertrand.design@gmail.com"
      },
      {
        "name": "Benjamin Urban",
        "email": "benjamin.urban@sueddeutsche.de"
      },
      {
        "name": "boneyao",
        "email": "admin@boneyao.com"
      },
      {
        "name": "Carl C Von Lewin",
        "email": "carlchristianlewin@gmail.com"
      },
      {
        "name": "CESAR RAMOS",
        "email": "c@imagenproactiva.com"
      },
      {
        "name": "Chad Killingsworth",
        "email": "ckillingsworth@jackhenry.com"
      },
      {
        "name": "Christopher De Cairos",
        "email": "chris.decairos@gmail.com"
      },
      {
        "name": "Cyrille David",
        "email": "cyrille@qonto.eu"
      },
      {
        "name": "Dario Vladovic",
        "email": "d.vladimyr@gmail.com"
      },
      {
        "name": "David Annez",
        "email": "david.annez@gmail.com"
      },
      {
        "name": "Davit Barbakadze",
        "email": "jayarjo@gmail.com"
      },
      {
        "name": "ddivernois",
        "email": "david-emmanuel.divernois@amadeus.com"
      },
      {
        "name": "Deliaz",
        "email": "D3liaz@gmail.com"
      },
      {
        "name": "Demis Palma",
        "email": "demis.palma@gmail.com"
      },
      {
        "name": "dhoko",
        "email": "aurelien@protonmail.com"
      },
      {
        "name": "dianhe",
        "email": "dianhe@webank.com"
      },
      {
        "name": "dineshks1",
        "email": "dineshks1@d.kumar44@outlook.com"
      },
      {
        "name": "Dmitry Tyschenko",
        "email": "dtyschenko@gmail.com"
      },
      {
        "name": "Douglas Li",
        "email": "doug@knotch.it"
      },
      {
        "name": "Dumitru Uzun",
        "email": "contact@duzun.me"
      },
      {
        "name": "Dustin",
        "email": "duburns@fanatics.com"
      },
      {
        "name": "Elchin Valiyev",
        "email": "elchin.valiyev@autodesk.com"
      },
      {
        "name": "Emil Hesslow",
        "email": "hesslow@gmail.com"
      },
      {
        "name": "Eric Redon",
        "email": "eric.redon@coox.org"
      },
      {
        "name": "Eric Schrenker",
        "email": "eric.schrenker@gmail.com"
      },
      {
        "name": "Erik Hesselink",
        "email": "hesselink@gmail.com"
      },
      {
        "name": "Fabian Becker",
        "email": "halfdan@xnorfz.de"
      },
      {
        "name": "Faisal Salman",
        "email": "f@faisalman.com"
      },
      {
        "name": "Frédéric Camblor",
        "email": "fcamblor@gmail.com"
      },
      {
        "name": "Frederik Ring",
        "email": "frederik.ring@gmail.com"
      },
      {
        "name": "Gerald Host",
        "email": "me@jacobford.co.uk"
      },
      {
        "name": "Germán M. Bravo",
        "email": "german.mb@gmail.com"
      },
      {
        "name": "Grigory Dmitrenko",
        "email": "grigory@snsk.ru"
      },
      {
        "name": "gulpin",
        "email": "gulping.gulpin@gmail.com"
      },
      {
        "name": "Hendrik Helwich",
        "email": "h.helwich@iplabs.de"
      },
      {
        "name": "Hermann Ebert",
        "email": "ebbmo@HE.local"
      },
      {
        "name": "hr6r",
        "email": "hedian@gmail.com"
      },
      {
        "name": "Igor Topal",
        "email": "i.topal@smartweb.com.ua"
      },
      {
        "name": "Ildar Kamalov",
        "email": "i.kamalov@adguard.com"
      },
      {
        "name": "insanehong",
        "email": "insane.hong@navercorp.com"
      },
      {
        "name": "jackpoll",
        "email": "jackpoll123456@gmail.com"
      },
      {
        "name": "Jake Mc",
        "email": "startswithaj@users.noreply.github.com"
      },
      {
        "name": "JBYoshi",
        "email": "12983479+JBYoshi@users.noreply.github.com"
      },
      {
        "name": "Joey Parrish",
        "email": "joeyparrish@google.com"
      },
      {
        "name": "John Tantalo",
        "email": "john.tantalo@gmail.com"
      },
      {
        "name": "John Yanarella",
        "email": "jmy@codecatalyst.com"
      },
      {
        "name": "Jon Buckley",
        "email": "jon@jbuckley.ca"
      },
      {
        "name": "Josh Goldberg",
        "email": "joshuakgoldberg@outlook.com"
      },
      {
        "name": "Junki-Ishida",
        "email": "junki_ishida@dwango.co.jp"
      },
      {
        "name": "Kendall Buchanan",
        "email": "kendall@kendagriff.com"
      },
      {
        "name": "Lee Treveil",
        "email": "leetreveil@gmail.com"
      },
      {
        "name": "leonardo",
        "email": "leofiore@libero.it"
      },
      {
        "name": "Levente Balogh",
        "email": "balogh.levente.hu@gmail.com"
      },
      {
        "name": "Liam Quinn",
        "email": "lquinn@blackberry.com"
      },
      {
        "name": "Lithin",
        "email": "lithin@webklipper.com"
      },
      {
        "name": "ll-syber",
        "email": "670159357@qq.com"
      },
      {
        "name": "Loris Guignard",
        "email": "loris.guignard@gmail.com"
      },
      {
        "name": "Lukas Drgon",
        "email": "lukas.drgon@gmail.com"
      },
      {
        "name": "Lukas Eipert",
        "email": "leipert@users.noreply.github.com"
      },
      {
        "name": "Malash",
        "email": "i@malash.me"
      },
      {
        "name": "Martynas",
        "email": "martynas@firmfirm.co"
      },
      {
        "name": "Masahiko Sato",
        "email": "masasato@yahoo-corp.jp"
      },
      {
        "name": "Matt Brophy",
        "email": "matt@brophy.org"
      },
      {
        "name": "Matthew Origer",
        "email": "karatecowboy@gmail.com"
      },
      {
        "name": "Maximilian Haupt",
        "email": "mail@maximilianhaupt.com"
      },
      {
        "name": "Max Maurer",
        "email": "maxemanuel.maurer@gmail.com"
      },
      {
        "name": "Max Nordlund",
        "email": "max.nordlund@gmail.com"
      },
      {
        "name": "Michael Hess",
        "email": "mhess@connectify.me"
      },
      {
        "name": "MimyyK",
        "email": "michele.marais@hakisa.com"
      },
      {
        "name": "naoh",
        "email": "naoh.cs03g@nctu.edu.tw"
      },
      {
        "name": "Nicholas Ionata",
        "email": "nionata@ufl.edu"
      },
      {
        "name": "Nikhil Motiani",
        "email": "nikhil.motiani@outlook.com"
      },
      {
        "name": "Nik Rolls",
        "email": "nik@rolls.cc"
      },
      {
        "name": "nionata",
        "email": "n.ionata129@gmail.com"
      },
      {
        "name": "niris",
        "email": "nirisix@gmail.com"
      },
      {
        "name": "Nobuo Okada",
        "email": "nookada@yahoo-corp.jp"
      },
      {
        "name": "o.drapeza",
        "email": "o.drapeza@tinkoff.ru"
      },
      {
        "name": "otakuSiD",
        "email": "otakusid@gmail.com"
      },
      {
        "name": "patrick-nurt",
        "email": "github@pereira.dk"
      },
      {
        "name": "Pavel Studeny",
        "email": "studeny@avast.com"
      },
      {
        "name": "Peter Dave Hello",
        "email": "PeterDaveHello@users.noreply.github.com"
      },
      {
        "name": "philippsimon",
        "email": "github@philippsimon.de"
      },
      {
        "name": "Pieter Hendrickx",
        "email": "pieter.hendrickx@belfius.be"
      },
      {
        "name": "Piper Chester",
        "email": "piperchester@gmail.com"
      },
      {
        "name": "Queen Vinyl Darkscratch",
        "email": "vinyldarkscratch@gmail.com"
      },
      {
        "name": "Raine Makelainen",
        "email": "raine.makelainen@jolla.com"
      },
      {
        "name": "Raman Savaryn",
        "email": "homeneartheocean@gmail.com"
      },
      {
        "name": "Robert Tod",
        "email": "robert@qubit.com"
      },
      {
        "name": "roman.savarin",
        "email": "roman.savarin@skywindgroup.com"
      },
      {
        "name": "Ron Korland",
        "email": "ron@testim.io"
      },
      {
        "name": "Ross Noble",
        "email": "rosshnoble@gmail.com"
      },
      {
        "name": "ruicong",
        "email": "466403866@qq.com"
      },
      {
        "name": "Sandro Sonntag",
        "email": "sandro.sonntag@adorsys.de"
      },
      {
        "name": "sgautrea",
        "email": "shanegautreau@gmail.com"
      },
      {
        "name": "Shane Gautreau",
        "email": "sgautrea@opentext.com"
      },
      {
        "name": "Shane Thacker",
        "email": "shane@steadymade.com"
      },
      {
        "name": "Shreedhar",
        "email": "shreedhar@uber.com"
      },
      {
        "name": "Simon Eisenmann",
        "email": "simon@longsleep.org"
      },
      {
        "name": "Simon Lang",
        "email": "me@simonlang.org"
      },
      {
        "name": "Stiekel",
        "email": "histkc@gmail.com"
      },
      {
        "name": "sUP",
        "email": "dani3l@gmail.com"
      },
      {
        "name": "Sylvain Gizard",
        "email": "sylvain.gizard@gmail.com"
      },
      {
        "name": "szchenghuang",
        "email": "szchenghuang@gmail.com"
      },
      {
        "name": "Tanguy Krotoff",
        "email": "tkrotoff@gmail.com"
      },
      {
        "name": "Tony Tomarchio",
        "email": "tony@tomarchio.cc"
      },
      {
        "name": "Ulrich Schmidt",
        "email": "u.schmidt@velian.de"
      },
      {
        "name": "Vadim Kurachevsky",
        "email": "vadim@hmvs.org"
      },
      {
        "name": "Yılmaz",
        "email": "yilmazdemir36@gmail.com"
      },
      {
        "name": "yuanyang",
        "email": "work_yuanyang@163.com"
      },
      {
        "name": "Yun Young-jin",
        "email": "yupmin@yupmin-office-macmini.local"
      },
      {
        "name": "Zach Bjornson",
        "email": "zbbjornson@gmail.com"
      }
    ],
    "main": "src/ua-parser.js",
    "scripts": {
      "build": "uglifyjs src/ua-parser.js -o dist/ua-parser.min.js --comments '/^ UA/' && uglifyjs src/ua-parser.js -o dist/ua-parser.pack.js --comments '/^ UA/' --compress --mangle",
      "test": "jshint src/ua-parser.js && mocha -R nyan test/test.js",
      "test-ci": "jshint src/ua-parser.js && mocha -R spec test/test.js",
      "verup": "node ./node_modules/verup",
      "version": "node ./node_modules/verup 0"
    },
    "verup": {
      "files": [
        "bower.json",
        "package.js",
        "src/ua-parser.js"
      ],
      "regs": [
        "^((?:\\$|(\\s*\\*\\s*@)|(\\s*(?:var|,)?\\s+))(?:LIBVERSION|version)[\\s\\:='\"]+)([0-9]+(?:\\.[0-9]+){2,2})",
        "^(\\/?\\s?\\*.*v)([0-9]+(?:\\.[0-9]+){2,2})"
      ]
    },
    "devDependencies": {
      "@babel/parser": "7.15.8",
      "@babel/traverse": "7.15.4",
      "jshint": "~2.12.0",
      "mocha": "~8.2.0",
      "requirejs": "^2.3.2",
      "safe-regex": "^2.1.1",
      "uglify-js": "~3.12.0",
      "verup": "^1.3.x"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/faisalman/ua-parser-js.git"
    },
    "license": "MIT",
    "engines": {
      "node": "*"
    },
    "bugs": {
      "url": "https://github.com/faisalman/ua-parser-js/issues"
    },
    "demo": "https://faisalman.github.io/ua-parser-js",
    "download": "https://raw.github.com/faisalman/ua-parser-js/master/dist/ua-parser.min.js",
    "funding": [
      {
        "type": "opencollective",
        "url": "https://opencollective.com/ua-parser-js"
      },
      {
        "type": "paypal",
        "url": "https://paypal.me/faisalman"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/athena/.hyper_plugins/cache/v6/npm-ua-parser-js-0.7.31-649a656b191dffab4f21d5e053e27ca17cbff5c6-integrity/node_modules/ua-parser-js/package.json",
    "readmeFilename": "readme.md",
    "readme": "<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/faisalman/ua-parser-js/gh-pages/images/logo.png\" width=\"256\" height=\"256\"> \n</p>\n\n<p align=\"center\">\n<a href=\"https://travis-ci.org/faisalman/ua-parser-js\"><img src=\"https://travis-ci.org/faisalman/ua-parser-js.svg?branch=master\"></a>\n<a href=\"https://www.npmjs.com/package/ua-parser-js\"><img src=\"https://img.shields.io/npm/v/ua-parser-js.svg\"></a>\n<a href=\"https://www.npmjs.com/package/ua-parser-js\"><img src=\"https://img.shields.io/npm/dw/ua-parser-js.svg\"></a>\n<a href=\"https://www.jsdelivr.com/package/npm/ua-parser-js\"><img src=\"https://data.jsdelivr.com/v1/package/npm/ua-parser-js/badge\"></a>\n<a href=\"https://cdnjs.com/libraries/UAParser.js\"><img src=\"https://img.shields.io/cdnjs/v/UAParser.js.svg\"></a>\n</p>\n\n# UAParser.js\n\nJavaScript library to detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data with relatively small footprint (~17KB minified, ~6KB gzipped) that can be used either in browser (client-side) or node.js (server-side).\n\n* Author    : Faisal Salman <<f@faisalman.com>>\n* Demo      : https://faisalman.github.io/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n# Documentation\n\n## Constructor\n\n* `new UAParser([uastring][,extensions])`\n    * returns new instance\n\n* `UAParser([uastring][,extensions])`\n    * returns result object `{ ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }`\n\n## Methods\n\n* `getBrowser()`\n    * returns `{ name: '', version: '' }`\n\n```sh\n# Possible 'browser.name':\n2345Explorer, 360 Browser, Amaya, Android Browser, Arora, Avant, Avast, AVG,\nBIDUBrowser, Baidu, Basilisk, Blazer, Bolt, Brave, Bowser, Camino, Chimera,\nChrome Headless, Chrome WebView, Chrome, Chromium, Comodo Dragon, Dillo,\nDolphin, Doris, Edge, Electron, Epiphany, Facebook, Falkon, Fennec, Firebird,\nFirefox [Reality], Flock, Flow, GSA, GoBrowser, ICE Browser, IE, IEMobile, IceApe, \nIceCat, IceDragon, Iceweasel, Instagram, Iridium, Iron, Jasmine, K-Meleon,\nKindle, Klar, Konqueror, LBBROWSER, Line, Links, Lunascape, Lynx, MIUI Browser,\nMaemo Browser, Maemo, Maxthon, MetaSr Midori, Minimo, Mobile Safari, Mosaic,\nMozilla, NetFront, NetSurf, Netfront, Netscape, NokiaBrowser, Obigo, Oculus Browser,\nOmniWeb, Opera Coast, Opera [Mini/Mobi/Tablet], PaleMoon, PhantomJS, Phoenix, \nPolaris, Puffin, QQ, QQBrowser, QQBrowserLite, Quark, QupZilla, RockMelt, Safari, \nSailfish Browser, Samsung Browser, SeaMonkey, Silk, Skyfire, Sleipnir, Slim, \nSlimBrowser, Swiftfox, Tesla, Tizen Browser, UCBrowser, UP.Browser, Vivaldi, \nWaterfox, WeChat, Weibo, Yandex, baidu, iCab, w3m, Whale Browser...\n\n# 'browser.version' determined dynamically\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }`\n\n```sh\n# Possible 'device.type':\nconsole, mobile, tablet, smarttv, wearable, embedded\n\n# Possible 'device.vendor':\nAcer, Alcatel, Amazon, Apple, Archos, ASUS, AT&T, BenQ, BlackBerry, Dell,\nEssential, Fairphone, GeeksPhone, Google, HP, HTC, Huawei, Jolla, Lenovo, LG, \nMeizu, Microsoft, Motorola, Nexian, Nintendo, Nokia, Nvidia, OnePlus, OPPO, Ouya,\nPalm, Panasonic, Pebble, Polytron, Realme, RIM, Roku, Samsung, Sharp, Siemens,\nSony[Ericsson], Sprint, Tesla, Vivo, Vodafone, Xbox, Xiaomi, Zebra, ZTE, ...\n\n# 'device.model' determined dynamically\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```sh\n# Possible 'engine.name'\nAmaya, Blink, EdgeHTML, Flow, Gecko, Goanna, iCab, KHTML, Links, Lynx, NetFront,\nNetSurf, Presto, Tasman, Trident, w3m, WebKit\n\n# 'engine.version' determined dynamically\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```sh\n# Possible 'os.name'\nAIX, Amiga OS, Android[-x86], Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS,\nContiki, Fedora, Firefox OS, FreeBSD, Debian, Deepin, DragonFly, elementary OS, \nFuchsia, Gentoo, GhostBSD, GNU, Haiku, HP-UX, Hurd, iOS, Joli, KaiOS, Linpus, Linspire,\nLinux, Mac OS, Maemo, Mageia, Mandriva, Manjaro, MeeGo, Minix, Mint, Morph OS, NetBSD,\nNintendo, OpenBSD, OpenVMS, OS/2, Palm, PC-BSD, PCLinuxOS, Plan9, PlayStation, QNX, \nRaspbian, RedHat, RIM Tablet OS, RISC OS, Sabayon, Sailfish, Series40, Slackware, Solaris, \nSUSE, Symbian, Tizen, Ubuntu, Unix, VectorLinux, WebOS, Windows [Phone/Mobile], Zenwalk, ...\n\n# 'os.version' determined dynamically\n```\n\n* `getCPU()`\n    * returns `{ architecture: '' }`\n\n```sh\n# Possible 'cpu.architecture'\n68k, amd64, arm[64/hf], avr, ia[32/64], irix[64], mips[64], pa-risc, ppc, sparc[64]\n```\n\n* `getResult()`\n    * returns `{ ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }`\n\n* `getUA()`\n    * returns UA string of current instance\n\n* `setUA(uastring)`\n    * set UA string to be parsed\n    * returns current instance\n\n# Usage\n\n## Using HTML\n\n```html\n<!doctype html>\n<html>\n<head>\n<script src=\"ua-parser.min.js\"></script>\n<script>\n\n    var parser = new UAParser();\n    console.log(parser.getResult());\n    /*\n        /// This will print an object structured like this:\n        {\n            ua: \"\",\n            browser: {\n                name: \"\",\n                version: \"\",\n                major: \"\" //@deprecated\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            },\n            cpu: {\n                architecture: \"\"\n            }\n        }\n    */\n    // Default result depends on current window.navigator.userAgent value\n\n    // Now let's try a custom user-agent string as an example\n    var uastring1 = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring1);\n    var result = parser.getResult();\n    // You can also use UAParser constructor directly without having to create an instance:\n    // var result = UAParser(uastring1);\n\n    console.log(result.browser);        // {name: \"Chromium\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n    console.log(result.cpu.architecture);   // \"amd64\"\n\n    // Do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n## Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar http = require('http');\nvar parser = require('ua-parser-js');\n\nhttp.createServer(function (req, res) {\n    // get user-agent header\n    var ua = parser(req.headers['user-agent']);\n    // write the result as response\n    res.end(JSON.stringify(ua, null, '  '));\n})\n.listen(1337, '127.0.0.1');\n\nconsole.log('Server running at http://127.0.0.1:1337/');\n```\n\n## Using TypeScript\n\n```sh\n$ npm install --save @types/ua-parser-js\n# Download TS type definition from DefinitelyTyped repository:\n# https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/ua-parser-js\n```\n\n## Using jQuery/Zepto ($.ua)\n\nAlthough written in vanilla js, this library will automatically detect if jQuery/Zepto is present and create `$.ua` object (with values based on its User-Agent) along with `window.UAParser` constructor. To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`.\n\n```js\n// Say we are in a browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Get the details\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// Now lets try to reset to another custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.browser.name);     // \"Safari\"\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n\n// Add class to <body> tag\n// <body class=\"ua-browser-safari ua-devicetype-tablet\">\n$('body').addClass('ua-browser-' + $.ua.browser.name + ' ua-devicetype-' + $.ua.device.type);\n```\n\n## Using Extension\n\n* `UAParser([uastring,] extensions)`\n\n```js\n// Example:\nvar myOwnListOfBrowsers = [\n    [/(mybrowser)\\/([\\w\\.]+)/i], [UAParser.BROWSER.NAME, UAParser.BROWSER.VERSION]\n];\nvar myParser = new UAParser({ browser: myOwnListOfBrowsers });\nvar myUA = 'Mozilla/5.0 MyBrowser/1.3';\nconsole.log(myParser.setUA(myUA).getBrowser());  // {name: \"MyBrowser\", version: \"1.3\"}\n```\n\n# Development\n\n## Sponsors\n\n<a href=\"https://opencollective.com/ua-parser-js\"><img src=\"https://opencollective.com/ua-parser-js/tiers/backers.svg?avatarHeight=64\" height=\"80\"/></a> <a href=\"https://opencollective.com/ua-parser-js\"><img src=\"https://opencollective.com/ua-parser-js/tiers/sponsors.svg?avatarHeight=64\" height=\"80\"/></a>\n\n<a href=\"https://www.paypal.me/faisalman/\"><img src=\"https://cdn.rawgit.com/twolfson/paypal-github-button/1.0.0/dist/button.svg\" height=\"40\"></a>\n\n## Contributors\n\n<a href=\"https://github.com/faisalman/ua-parser-js/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=faisalman/ua-parser-js\" />\n</a>\n\nMade with [contributors-img](https://contrib.rocks).\n\n## How To Contribute\n\n* Fork and clone this repository\n* Make some changes as required\n* Write unit test to showcase its functionality\n* Run the test suites to make sure it's not breaking anything `$ npm test`\n* Submit a pull request under `develop` branch\n\n# License\n\nMIT License\n\nCopyright (c) 2012-2021 Faisal Salman <<f@faisalman.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2012-2021 Faisal Salman <<f@faisalman.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ua-parser-js/-/ua-parser-js-0.7.31.tgz#649a656b191dffab4f21d5e053e27ca17cbff5c6",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ua-parser-js/-/ua-parser-js-0.7.31.tgz",
    "hash": "649a656b191dffab4f21d5e053e27ca17cbff5c6",
    "integrity": "sha512-qLK/Xe9E2uzmYI3qLeOmI0tEOt+TBBQyUIAh4aAgU05FVYzeZrKUdkAZfBNVGRaHVgV0TDkdEngJSw/SyQchkQ==",
    "registry": "npm",
    "packageName": "ua-parser-js",
    "cacheIntegrity": "sha512-qLK/Xe9E2uzmYI3qLeOmI0tEOt+TBBQyUIAh4aAgU05FVYzeZrKUdkAZfBNVGRaHVgV0TDkdEngJSw/SyQchkQ== sha1-ZJplaxkd/6tPIdXgU+J8oXy/9cY="
  },
  "registry": "npm",
  "hash": "649a656b191dffab4f21d5e053e27ca17cbff5c6"
}