// generic drawing of more complex things

@mixin entry($t, $fc: $primary) {
//
// entry
//
// $t: entry type
// $fc: focus color
//

  @if $t == normal {
    transition: $transition, box-shadow $ripple-fade-out-duration $ease-out;
    box-shadow: inset 0 0 0 2px transparent;
    background-color: $entry;
    color: $text;
  }

  @if $t == hover {
    background-color: $overlay-hover;
    box-shadow: inset 0 0 0 2px $overlay-hover;
  }

  @if $t == focus {
    background-color: $overlay-focus;
    box-shadow: inset 0 0 0 2px if($fc == $primary, $track, $fc);
  }

  @if $t == checked {
    background-color: $entry;
    box-shadow: inset 0 0 0 2px if($fc == $primary, $primary, $fc);
  }

  @if $t == disabled {
    box-shadow: inset 0 0 0 2px transparent;
    background-color: $fill;
    color: $text-disabled;
  }

  @if $t == raised-normal {
    transition: $transition, box-shadow $ripple-fade-out-duration $ease-out;
    border-image: none;
    box-shadow: inset 0 0 0 2px transparent;
    background-color: if($fc == $primary, $surface, $fc);
    color: if($fc == $primary, $text, on($fc));
  }

  @if $t == raised-hover {
    box-shadow: inset 0 0 0 2px $overlay-hover;
  }

  @if $t == raised-focus {
    border-image: none;
    box-shadow: inset 0 0 0 2px if($fc == $primary, $primary, $fc);
  }

  @if $t == raised-disabled {
    box-shadow: inset 0 0 0 2px transparent;
    background-color: $base-alt;
    color: $text-disabled;
  }
}


@mixin button($t) {
//
// button
//
// $t: button type
//

  @if $t == normal {
    transition: $transition,
                box-shadow $ripple-fade-in-duration $ease-out;
    outline: none;
    box-shadow: inset 0 0 0 9999px transparent;
    background-color: $button;
    color: $text;
  }

  @if $t == hover {
    box-shadow: inset 0 0 0 9999px $overlay-hover;
  }

  @if $t == focus {
    box-shadow: inset 0 0 0 2px $overlay-focus, inset 0 0 0 9999px transparent;
  }

  @if $t == active {
    transition: box-shadow $ripple-fade-in-duration $ease-out,
                background-color $ripple-fade-in-duration $ease-out;
    box-shadow: inset 0 0 0 9999px $overlay-active;
  }

  @if $t == disabled {
    box-shadow: none;
    background-color: $fill;
    color: $text-disabled;
  }

  @if $t == checked {
    box-shadow: none;
    background-color: $primary;
    color: on($primary);
  }

  @if $t == checked-hover {
    box-shadow: inset 0 0 0 9999px transparent;
  }

  @if $t == checked-disabled {
    box-shadow: inset 0 0 0 9999px $overlay-checked;
    background-color: $fill;
    color: $text-disabled;
  }

  @if $t == flat-normal {
    transition: $transition;
    outline: none;
    box-shadow: inset 0 0 0 9999px transparent;
    background-color: transparent;
    color: $text-secondary;
  }

  @if $t == flat-hover {
    box-shadow: inset 0 0 0 9999px $overlay-hover;
    color: $text;
  }

  @if $t == flat-focus {
    box-shadow: inset 0 0 0 2px $overlay-focus;
    color: $text;
  }

  @if $t == flat-active {
    transition: $transition;
    box-shadow: inset 0 0 0 9999px $overlay-active;
    color: $text;
  }

  @if $t == flat-disabled {
    box-shadow: none;
    background-color: transparent;
    color: $text-secondary-disabled;
  }

  @if $t == flat-checked {
    background-color: $overlay-checked;
    color: $text;
  }

  @if $t == flat-checked-disabled {
    background-color: $overlay-checked;
    color: $text-disabled;
  }
}


@mixin overshoot($p) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_position: center $p;

  @if ($p == left) or ($p == right) {
    $_position: $p center;
  }

  background-size: 200% 70%;

  background-image:
    radial-gradient(
      farthest-side at $p,
      rgba($primary, .24) 99%,
      rgba($primary, 0) 100%
    );

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}


@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: $track;
  $_undershoot_color_light: transparent;

  $_gradient_dir: left;
  $_dash_bg_size: 12px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: left $p;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 12px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p top;
  }

  background-color: transparent; // shouldn't be needed, but better to be sure

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  margin: 0 4px;

  @if ($p == left) or ($p == right) {
    margin: 4px 0;
  }
}
