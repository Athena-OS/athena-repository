#!/bin/sh
trap "exit 1" TERM
export TOP_PID=$$

############################################################
# Banner                                                   #
############################################################

printf '%b\n' "$(base64 -d <<<"H4sIAAAAAAAAA32NMRLEMAgDe79C3V0qfYgZ7iF+fLRmkvLMAAIjaen/635q806beQ2eWQ+SywXF3aCEz57WlArTOU6qtj6tHyg7riAeXKYaPbpFX1vfJi/tNzye+UcU9yEmqo2N8Cz8k95RmKzxdNZJJM6ocxtR+Fo34W71EiMBAAA=" | gunzip)" #User printf for colored output
echo

############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "comMENTOR extracts all comments from the specified URL resource."
   echo
   echo "$(basename "$0") [-e <extension>] [-h] [-u <website>] [-o <filename.txt>]"
   echo
   echo "Options:"
   echo "e     Specify the extension of the resource (i.e., html, xml, asp, aspx, php, js, css, sh...)."
   echo "h     Print this Help."
   echo "u     Input URL."
   echo "o     Print to a file."
   echo
   echo "Usage Examples:"
   echo "commentor -u "https://apis.google.com/js/platform.js" -e js"
   echo "commentor -u "https://raw.githubusercontent.com/D3vil0p3r/catana/main/catana" -e sh"
   echo
}


############################################################
# Process the input options. Add options as needed.        #
############################################################
# Get the options
while getopts ":e:hu:o:" option; do #When using getopts, putting : after an option character means that it requires an argument (i.e., 'i:' requires arg).
   case "${option}" in
      e) 
         ext=$OPTARG
         if [ $ext == "html" ] || [ $ext == "xml" ] || [ $ext == "asp" ] || [ $ext == "aspx" ];then
            xml=1
         elif [ $ext == "php" ] || [ $ext == "js" ] || [ $ext == "css" ]; then
            cstyle=1
         elif [ $ext == "sh" ]; then
            hashtag=1
         else
            echo "Select an extension: html, php, js, css or bash."
            exit 0
         fi
         ;;
      h) # display Help
         Help >&2
         exit 0
         ;;
      u) 
         url=$OPTARG
         ;;
      o)
         out=$OPTARG
         ;;
      : )
        echo "Missing option argument for -$OPTARG" >&2; exit 0;;
      #*  )
        #echo "Unimplemented option: -$OPTARG" >&2; exit 0;;
     \?) # Invalid option
         echo "Error: Invalid option" >&2
         ;;
   esac
done

echo
if [ ! "$url" ]; then
    echo "Error: no URL specified. Use -u https://targetsite.com/file.html."
    exit 0
fi

if [ ! "$ext" ]; then
    echo "Error: no extension specified. Use -e <extension>."
    exit 0
fi

if [ "$xml" ]; then
   #Look for <!-- --> comments
   xmlcomments=$(curl -s -L "$url" | tidy -q -numeric -asxhtml --show-warnings no | xmlstarlet sel --html -t -m '//comment()' -v . -n)

   if [ ! "$xmlcomments" ]; then
      echo "No comments found."
      exit 0
   fi

   if [ "$out" ]; then
       echo "Target: $url"
       echo
       echo "<!-- --> comments:" > $out
       echo >> $out
       echo "$xmlcomments" >> $out
       echo >> $out
       echo "Comments correctly stored in ${out} file"
       echo
   else
       echo "Target: $url"
       echo
       echo "<!-- --> comments:"
       echo
       echo "$xmlcomments"
       echo
       echo "End of comments."
   fi
elif [ "$cstyle" ]; then
   #Look for /* */ comments
   tmpfile="cstylecomment.txt"
   curl -s -L $url > $tmpfile
   cstylecomments=$(./decorate "$tmpfile" | ./filter | ./cleanup)
   rm -rf $tmpfile

   if [ ! "$cstylecomments" ]; then
      echo "No comments found."
      exit 0
   fi

   if [ "$out" ]; then
       echo "Target: $url"
       echo
       echo "// and /* */ comments:" >> $out
       echo >> $out
       echo "$cstylecomments" >> $out
       echo "Comments correctly stored in ${out} file"
       echo
   else
       echo "Target: $url"
       echo
       echo "// and /* */ comments:"
       echo
       echo "$cstylecomments"
       echo
       echo "End of comments."
   fi
elif [ "$hashtag" ]; then
   #Look for # comments
   hashtagcomments=$(curl -s -L "$url" | grep -o "#.*")

   if [ ! "$hashtagcomments" ]; then
      echo "No comments found."
      exit 0
   fi

   if [ "$out" ]; then
       echo "Target: $url"
       echo
       echo "# comments:" > $out
       echo >> $out
       echo "$hashtagcomments" >> $out
       echo >> $out
       echo "Comments correctly stored in ${out} file"
       echo
   else
       echo "Target: $url"
       echo
       echo "# comments:"
       echo
       echo "$hashtagcomments"
       echo
       echo "End of comments."
   fi
fi

