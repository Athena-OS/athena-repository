#!/bin/sh

pkill -f "/usr/bin/gjs /usr/share/gnome-shell/org.gnome.Shell.Notifications"

############################################################
# Colors                                                   #
############################################################

cecho() {
	# Reset
	Color_Off='\033[0m'       # Text Reset

	# Regular Colors
	#Black='\033[0;30m'        # Black
	Red='\033[0;31m'          # Red
	Green='\033[0;32m'        # Green
	Yellow='\033[0;33m'       # Yellow
	Blue='\033[0;34m'         # Blue
	Purple='\033[0;35m'       # Purple
	Cyan='\033[0;36m'         # Cyan
	White='\033[0;37m'        # White

	# Bold
	#BBlack='\033[1;30m'       # Black
	BRed='\033[1;31m'         # Red
	BGreen='\033[1;32m'       # Green
	BYellow='\033[1;33m'      # Yellow
	BBlue='\033[1;34m'        # Blue
	BPurple='\033[1;35m'      # Purple
	BCyan='\033[1;36m'        # Cyan
	BWhite='\033[1;37m'       # White

	COLOURS=($Color_Off $Black $Red $Green $Yellow $Blue $Purple $Cyan $White $BBlack $BRed $BGreen $BYellow $BBlue $BPurple $BCyan $BWhite)

	rand=$(( RANDOM % 17 ))

    echo -e "${COLOURS[$rand]}"
}

############################################################
# Banner                                                     #
############################################################
#cat banner.txt | gzip | base64
banner()
{
   echo
   base64 -d <<<"H4sIAAAAAAAAA0WOwQ3AMAgD/0zhX3/pQkh0EIavjalKJDuBC4BiAPUbPqtNAtGyHK2WVcPmHJ5DCmhhVDkvSb15gMkRSlPN2lKDLeSfkvAENZgJwq6FpnL04l6KzlFjtZ28PbF4AdOMIZzjAAAA" | gunzip
   echo
}
############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   banner
   echo
   echo "NIST Feed notifies you about the newest published CVEs according your filters."
   echo
   echo "Options:"
   echo "-A                        Filter by attack complexity metric (LOW='AC:L' or HIGH='AC:H')."
   echo "-a                        Filter by availability metric (NONE='A:N', LOW='A:L' or HIGH='A:H')."
   echo "-c                        Filter by confidentiality metric (NONE='C:N', LOW='C:L' or HIGH='C:H')."
   echo "-C                        Random colored output."
   echo "-e                        Specify a CVE for getting details."
   echo "-h                        Print this Help."
   echo "-i                        Filter by integrity metric (NONE='I:N', LOW='I:L' or HIGH='I:H')."
   echo "-l                        Retrieve the latest CVE according to the filters."
   echo "-m                        Filter by the specified CVSSv3 metric codes. It is used mainly for managing all filters selected by the user when the notification popup must be created."
   echo "-n                        Enable desktop notification for the latest CVE according the applied filters by crontab."
   echo "-P                        Filter by privileges required metric (NONE='PR:N', LOW='PR:L' or HIGH='PR:H')."
   echo "-r                        Specify the maximum number of results that are returned based on the request parameters. The default value is 20. For network considerations, maximum allowable limit is 2,000."
   echo "-S                        Filter by scope metric (UNCHANGED='S:U' or CHANGED='S:C')."
   echo "-s                        Filter by severity (LOW, MEDIUM, HIGH or CRITICAL)."
   echo "-U                        Filter by user interaction metric (NONE='UI:N' or REQUIRED='UI:R')."
   echo "-V                        Filter by attack vector metric (NETWORK='AV:N', ADJACENT='AV:A', LOCAL='AV:L' or PHYSICAL='AV:P')."
   echo "-z                        Disable desktop notification."
   echo
   echo "Usage Examples"
   echo
   echo "Set Desktop Notifications for latest or updated CVE with CRITICAL severity:" 
   echo "nist-feed -n -l -s CRITICAL"
   echo
   echo "Show details about the last three CVEs. No Desktop Notifications:"
   echo "nist-feed -r 3"
   echo
   echo "Show details about the last twenty CVEs with PHYSICAL as attack vector and MEDIUM severity. No Desktop Notifications:"
   echo "nist-feed -V AV:P -s MEDIUM"
   echo
   echo "Set Desktop Notifications for latest or updated CVE having high Confidentiality, Integrity and Availability impact:" 
   echo "nist-feed -n -l -m C:H/I:H/A:H" 
   echo "or"
   echo "nist-feed -n -l -c C:H -i I:H -a A:H"
   echo
   echo "Set Desktop Notifications for latest or updated CVE with HIGH attack complexity and NETWORK as attack vector:"
   echo "nist-feed -n -l -A AC:H -V AV:N"
   echo
   echo "Reference: https://nvd.nist.gov"
}

############################################################
# Process the input options. Add options as needed.        #
############################################################
# Get the options
while getopts "A:a:Cc:e:hi:lm:nP:r:s:S:U:V:z" option; do #When using getopts, putting : after an option character means that it requires an argument (i.e., 'i:' requires arg).
   case "${option}" in
      
      A)
          attcom=$OPTARG
          if [ $attcom != "AC:L" ] && [ $attcom != "AC:H" ];then
             echo "Please type AC:L (LOW) or AC:H (HIGH) as attack complexity argument. Exiting..."
             exit 0
          fi
          metric+="$attcom/"
          ;;
      V)
          attvec=$OPTARG
          if [ $attvec != "AV:N" ] && [ $attvec != "AV:A" ] && [ $attvec != "AV:L" ] && [ $attvec != "AV:P" ];then
             echo "Please type AV:N (NETWORK), AV:A (ADJACENT), AV:L (LOCAL) or AV:P (PHYSICAL) as attack vector argument. Exiting..."
             exit 0
          fi
          metric+="$attvec/"
          ;;
      a)
          avail=$OPTARG
          if [ $avail != "A:N" ] && [ $avail != "A:L" ] && [ $avail != "A:H" ];then
             echo "Please type A:N (NONE), A:L (LOW) or A:H (HIGH) as availability argument. Exiting..."
             exit 0
          fi
          metric+="$avail/"
          ;;
      c)
          confid=$OPTARG
          if [ $confid != "C:N" ] && [ $confid != "C:L" ] && [ $confid != "C:H" ];then
             echo "Please type C:N (NONE), C:L (LOW) or C:H (HIGH) as confidentiality argument. Exiting..."
             exit 0
          fi
          metric+="$confid/"
          ;;
      e)
          cve=$OPTARG
          ;;
      i)
          integ=$OPTARG
          if [ $integ != "I:N" ] && [ $integ != "I:L" ] && [ $integ != "I:H" ];then
             echo "Please type I:N (NONE), I:L (LOW) or I:H (HIGH) as integrity argument. Exiting..."
             exit 0
          fi
          metric+="$integ/"
          ;;
      P)
          privreq=$OPTARG
          if [ $privreq != "PR:N" ] && [ $privreq != "PR:L" ] && [ $privreq != "PR:H" ];then
             echo "Please type PR:N (NONE), PR:L (LOW) or PR:H (HIGH) as privileges required argument. Exiting..."
             exit 0
          fi
          metric+="$privreq/"
          ;;
      S)
          scp=$OPTARG
          if [ $scp != "S:U" ] && [ $scp != "S:C" ];then
             echo "Please type S:U (UNCHANGED) or S:C (CHANGED) as scope argument. Exiting..."
             exit 0
          fi
          metric+="$scp/"
          ;;
      U)
          ui=$OPTARG
          if [ $ui != "UI:N" ] && [ $ui != "UI:R" ];then
             echo "Please type UI:N (NONE) or UI:R (REQUIRED) as user interaction argument. Exiting..."
             exit 0
          fi
          metric+="$ui/"
          ;;

      C)
         cecho
         ;;
      h) # display Help
         Help >&2
         exit 0
         ;;
      l) # 
         latest=1
         results=1
         ;;
      m) # Multiple metrics set by the user. It must not be used with specific CVSSv3 metrics arguments
         metric=$OPTARG
         metric_all=1
         ;;
      n) # 
         notify=1
         latest=1
         results=1
         ;;
      r) # Enter a command
         results=$OPTARG
         ;;
      s) # Enter a command
         severity=$OPTARG
         if [ $severity != "NONE" ] && [ $severity != "LOW" ] && [ $severity != "MEDIUM" ] && [ $severity != "HIGH" ] && [ $severity != "CRITICAL" ];then
            echo "Please type NONE, LOW, MEDIUM, HIGH or CRITICAL as severity argument. Exiting..."
            exit 0
         fi
         ;;
      z) # Enter a command
         end=1
         ;;
      : )
        echo "Missing option argument for -$OPTARG" >&2; exit 0;;
      *  )
        echo "Unimplemented option: -$OPTARG" >&2; exit 0;;
     \?) # Invalid option
        echo "Error: Invalid option" >&2
         ;;
   esac
done

if [[ $# -eq 0 ]] ; then
    Help
    exit 0
fi

banner

echo
echo "NIST Feed"
echo
############################################################
############################################################
# Main program                                             #
############################################################
############################################################

last_cve_file="$HOME/.last_cve"
cve_json_file="$HOME/.cve.json"

if [ "$end" ]; then
   echo "Disabling NIST NVD feed popup notification..."
   crontab -l | sed '/nist-feed/d' | crontab
   rm -rf $last_cve_file
   rm -rf $cve_json_file
   exit 0
fi

baseURL="https://services.nvd.nist.gov/rest/json/cves/1.0?sortOrder=publishedDate"

if [ "$severity" ] && [ ! "$cve" ]; then
    baseURL+="&cvssV3Severity=$severity"
fi

if [ "$metric" ] && [ ! "$cve" ]; then
    if [ ! "$metric_all" ]; then
       metric=${metric::-1} #Delete the last character '/'
    fi
    baseURL+="&cvssV3Metrics=$metric"
fi

if [ "$results" ] && [ ! "$latest" ] && [ ! "$cve" ]; then
    baseURL+="&resultsPerPage=$results"
fi

if [ "$latest" ] && [ ! "$cve" ]; then
    baseURL+="&resultsPerPage=$results"
fi

if [ "$cve" ] && [ ! "$latest" ] && [ ! "$results" ] && [ ! "$severity" ]; then
    baseURL="https://services.nvd.nist.gov/rest/json/cve/1.0/$cve"
fi

#echo "Calling $baseURL"

curl -s --location --request GET "$baseURL" | jq '.result.CVE_Items' > $cve_json_file

if [[ "$latest" -eq 1 ]] && [ ! "$cve" ]; then
   countCVE=1
else  
   countCVE=$(jq -r '. | length' $cve_json_file)
fi

for sequenceCVE in $(seq $countCVE)
do
      let indexCVE=$sequenceCVE-1
      id=$(jq -r ".[$indexCVE].cve.CVE_data_meta.ID" $cve_json_file)

      description=$(jq -r ".[$indexCVE].cve.description.description_data[0].value" $cve_json_file)

      publishedDate=$(jq -r ".[$indexCVE].publishedDate" $cve_json_file)
      lastModifiedDate=$(jq -r ".[$indexCVE].lastModifiedDate" $cve_json_file)

      attackVector=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.attackVector" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.attackVector" $cve_json_file)")
      attackComplexity=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.attackComplexity" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.attackComplexity" $cve_json_file)")
      privilegesRequired=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.privilegesRequired" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.privilegesRequired" $cve_json_file)")
      userInteraction=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.userInteraction" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.userInteraction" $cve_json_file)")
      scope=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.scope" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.scope" $cve_json_file)")
      confidentialityImpact=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.confidentialityImpact" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.confidentialityImpact" $cve_json_file)")
      integrityImpact=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.integrityImpact" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.integrityImpact" $cve_json_file)")
      availabilityImpact=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.availabilityImpact" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.availabilityImpact" $cve_json_file)")
      baseScore=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.baseScore" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.baseScore" $cve_json_file)")
      baseSeverity=$([ $(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.baseSeverity" $cve_json_file) == "null" ] && echo "To Be Evaluated" || echo "$(jq -r ".[$indexCVE].impact.baseMetricV3.cvssV3.baseSeverity" $cve_json_file)")
      nvdURL="https://nvd.nist.gov/vuln/detail/$id"      

      countURL=$(jq -r ".[$indexCVE].cve.references.reference_data | length" $cve_json_file)
      array_URL=()
      
      echo
      echo "$id"
      echo
      echo "$description"
      echo
      echo "References:"
      for sequenceURL in $(seq $countURL)
      do
        let index=$sequenceURL-1
        array_URL=$(jq -r ".[$indexCVE].cve.references.reference_data[$index].url" $cve_json_file)
        echo "$array_URL"
      done
      echo
      echo "Published Date: $publishedDate"
      echo "Last Modified Date: $lastModifiedDate"
      echo
      echo "Attack Vector: $attackVector"
      echo "Attack Complexity: $attackComplexity"
      echo "Privileges Required: $privilegesRequired"
      echo "User Interaction: $userInteraction"
      echo "Scope: $scope"
      echo "CIA Impacts: Confidentiality -> $confidentialityImpact; Integrity -> $integrityImpact; Availability -> $availabilityImpact"
      echo "Severity: Score -> $baseScore ($baseSeverity)"
      echo
      echo "URL: $nvdURL"
      echo
done

if [[ ! "$notify" ]]; then
   LAST_CVE=$(<$last_cve_file)
fi

if [[ "$id" != "$LAST_CVE" ]] || [ $(crontab -l | wc -c) -eq 0 ];then #if the previous CVE is different from the current one, OR the crontab is empty, popup notification
   if [[ ! "$notify" ]]; then #LAST_CVE must be set only if the user does not set the notification parameters, otherwise when crontab will call the 1st time nist-feed, $id is already = to $LAST_CVE
      echo "$id" > $last_cve_file
      #Generate the popup notification
      killall dunst;notify-send -u normal "$id" "$description\n\n<b>$nvdURL</b>"
   fi
   
   if [[ "$notify" -eq 1 ]] && [ ! "$severity" ] && [ ! "$metric" ]; then
      crontab -l | sed '/nist-feed/d' | crontab
      (crontab -l 2>/dev/null; echo "*/30 * * * * ( killall dunst ; XDG_RUNTIME_DIR=/run/user/$(id -u) /usr/local/bin/nist-feed -l)") | crontab -
   elif [[ "$notify" -eq 1 ]] && [ "$severity" ] && [ ! "$metric" ]; then
      crontab -l | sed '/nist-feed/d' | crontab
      (crontab -l 2>/dev/null; echo "*/30 * * * * ( killall dunst ; XDG_RUNTIME_DIR=/run/user/$(id -u) /usr/local/bin/nist-feed -l -s $severity)") | crontab -
   elif [[ "$notify" -eq 1 ]] && [ ! "$severity" ] && [ "$metric" ]; then
      crontab -l | sed '/nist-feed/d' | crontab
      (crontab -l 2>/dev/null; echo "*/30 * * * * ( killall dunst ; XDG_RUNTIME_DIR=/run/user/$(id -u) /usr/local/bin/nist-feed -l -m $metric)") | crontab -
   elif [[ "$notify" -eq 1 ]] && [ "$severity" ] && [ "$metric" ]; then
      crontab -l | sed '/nist-feed/d' | crontab
      (crontab -l 2>/dev/null; echo "*/30 * * * * ( killall dunst ; XDG_RUNTIME_DIR=/run/user/$(id -u) /usr/local/bin/nist-feed -l -s $severity -m $metric)") | crontab -
   fi
   
fi

rm -rf $cve_json_file
